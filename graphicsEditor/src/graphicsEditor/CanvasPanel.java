/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphicsEditor;

import java.awt.AWTException;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Composite;
import java.awt.CompositeContext;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Robot;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Area;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ImageObserver;
import java.util.ArrayList;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.shape.Line;
import javax.swing.JPanel;

/**
 *
 * @author VADIM
 */
public class CanvasPanel extends JPanel {

    private int x1;
    private int y1;
    private int x2;
    private int y2;
    private boolean isMouseClicked;
    private Tool tool;

    private Stack<Shape> shapes = new Stack();

    private Area area = new Area();

    /**
     * Creates new form CanvasPanel
     */
    public CanvasPanel() {
        initComponents();
        setBackground(Color.white);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        x2 = evt.getX();
        y2 = evt.getY();
        Line2D.Float line = new Line2D.Float(x1, y1, x2, y2);
        shapes.add(line);
        repaint();
        x1 = x2;
        y1 = y2;
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        isMouseClicked = true;
        x1 = evt.getX();
        y1 = evt.getY();
        area = new Area();
        repaint(x1, y1, 5, 5);
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        isMouseClicked = false;
    }//GEN-LAST:event_formMouseReleased

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);//To change body of generated methods, choose Tools | Templates.
        Graphics2D g2d = (Graphics2D) g;
        //g2d.setColor(Color.red);
        /* if (isMouseClicked) {
            Rectangle rect = new Rectangle(x, y, 10, 10);
            shapes.add(rect);
            g2d.fill(rect);
        }*/
 
        Stroke stroke =new BasicStroke(5,
                BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND);
            g2d.drawLine(x1, y1, x2, y2);
            g2d.setStroke(stroke);
         
        for (Shape s : shapes) {
            g2d.draw(s);
        }

        //g2d.drawRect(0, 100, 1000, 100);
        /*if (isMouseClicked) {
            selectPolygon(g2d);
        }*/
    }

    private Polygon selectPolygon(Graphics2D g) {
        /*isMouseClicked = false;
        //Color color = this.getComponentAt(x, y)
        System.out.println(new Color(getScreenComponent(this).getRGB(x, y)).toString());
        ArrayList<Point> points = new ArrayList<>();
        if (shapes.empty()) {
            return null;
        }
        boolean isEdge = false;
        int px = x;
        int py = y;
        for (Shape sh : shapes) {
            if (sh.contains(new Point(x, y))) {
                System.out.println(x + " , " + y);
                break;
            }
        }

        do {
            Point point = new Point(px, py);
            for (Shape sh : shapes) {
                if (sh.contains(point)) {

                    isEdge = true;
                    break;
                }
            }
            px++;
            if (px == this.getWidth()) {
                return null;
            }
        } while (!isEdge);

        points.add(new Point(px, py));
        g.drawRect(px, py, 100, 100);
        /*while (true) {

        }*/
        return null;

    }

    public static BufferedImage getScreenComponent(Component component) {
        BufferedImage image = new BufferedImage(
                component.getWidth(),
                component.getHeight(),
                BufferedImage.TYPE_INT_RGB
        );
        component.paint(image.getGraphics());
        return image;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

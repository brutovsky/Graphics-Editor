/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphicsEditor;

import static graphicsEditor.CanvasPanel.getScreenComponent;
import graphicsEditor.drawnShapes.Drawable;
import graphicsEditor.drawnShapes.DrawnImage;
import graphicsEditor.drawnShapes.DrawnRectangle;
import graphicsEditor.instruments.Tool;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;

/**
 * The main frame of the application
 *
 * @author VADYM NAKYTNIAK
 */
public class GEFrame extends javax.swing.JFrame {

    final private CanvasPanel canvas; // Canvas for drawing on
    final private ToolbarPanel toolbar; // Panel with all tools
    final private ScrollSidePanel scrollside; // Side panel with a scrollbar and some labels
    private JScrollPane scrollCanvas; // ScrollPane for CanvasPanel to be scrollable

    // Current location of a mouse on the frame
    private int current_x_coordinate;
    private int current_y_coordinate;

    /**
     * Creates new form GEFrame
     */
    public GEFrame() {
        canvas = new CanvasPanel(this);
        toolbar = new ToolbarPanel(this);
        scrollside = new ScrollSidePanel(this);
        scrollCanvas = new JScrollPane(canvas);
        scrollCanvas.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollCanvas.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        add(scrollCanvas, BorderLayout.CENTER);
        add(toolbar, BorderLayout.PAGE_START);
        add(scrollside, BorderLayout.EAST);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        saveAsItem = new javax.swing.JMenuItem();
        newPictureItem = new javax.swing.JMenuItem();
        aboutItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        backItem = new javax.swing.JMenuItem();
        forwardItem = new javax.swing.JMenuItem();
        cutMenu = new javax.swing.JMenuItem();
        insertItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graphics Editor");
        setBackground(new java.awt.Color(204, 243, 166));
        setMinimumSize(new java.awt.Dimension(1200, 700));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        menuBar.setForeground(Color.red);
        menuBar.setBackground(new java.awt.Color(255, 255, 255));
        menuBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        fileMenu.setText("File");

        openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openItem.setText("Open");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        fileMenu.add(openItem);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveItem.setText("Save");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        saveAsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        saveAsItem.setText("Save as...");
        saveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsItem);

        newPictureItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newPictureItem.setText("Clean canvas");
        newPictureItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPictureItemActionPerformed(evt);
            }
        });
        fileMenu.add(newPictureItem);

        aboutItem.setText("About");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        fileMenu.add(aboutItem);

        exitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        backItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        backItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/back.png"))); // NOI18N
        backItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backItemActionPerformed(evt);
            }
        });
        editMenu.add(backItem);

        forwardItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        forwardItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/forward.png"))); // NOI18N
        forwardItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardItemActionPerformed(evt);
            }
        });
        editMenu.add(forwardItem);

        cutMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenu.setText("Cut out");
        cutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuActionPerformed(evt);
            }
        });
        editMenu.add(cutMenu);

        insertItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        insertItem.setText("Insert");
        insertItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertItemActionPerformed(evt);
            }
        });
        editMenu.add(insertItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (canvas.getTool() == Tool.PIPETTE) {
            Color color = new Color(getScreenComponent(this).getRGB(evt.getX(), evt.getY()));
            switch (canvas.getPipetteChoice()) {
                case CanvasPanel.BRUSH_COLOR: {
                    canvas.setBrushColor(color);
                    break;
                }
                case CanvasPanel.FILL_COLOR: {
                    canvas.setFillColor(color);
                    break;
                }
                case CanvasPanel.BACKGROUND_COLOR: {
                    DrawnRectangle background = new DrawnRectangle(canvas.getStroke(), color, color, 0, 0, CanvasPanel.WIDTH, CanvasPanel.HEIGHT);
                    canvas.setBackgroundRectangle(background);
                    break;
                }
            }
        }
    }//GEN-LAST:event_formMouseClicked

    private void forwardItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardItemActionPerformed
        if (canvas.getBin().isEmpty()) {
            return;
        }
        canvas.getShapes().add(canvas.getBin().pop());
        canvas.repaint();
    }//GEN-LAST:event_forwardItemActionPerformed

    private void backItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backItemActionPerformed
        if (canvas.getShapes().size() == 1) {
            return;
        }
        canvas.getBin().add(canvas.getShapes().get(canvas.getShapes().size() - 1));
        canvas.getShapes().remove(canvas.getShapes().size() - 1);
        canvas.repaint();
    }//GEN-LAST:event_backItemActionPerformed

    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        File file = new File(System.getProperty("user.dir"));
        JFileChooser fc = new JFileChooser(file);
        fc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                String fileName = f.getName();
                return fileName.endsWith(".png");
            }

            @Override
            public String getDescription() {
                return ".png";
            }
        });
        int i = fc.showOpenDialog(null);
        switch (i) {
            case JFileChooser.APPROVE_OPTION: {
                try {
                    File fileSave = fc.getSelectedFile();
                    if (!fileSave.getName().endsWith(".png")) {
                        throw new IOException();
                    }
                    BufferedImage image = ImageIO.read(fileSave);
                    canvas.getShapes().add(new DrawnImage(image, 0, 0));
                    canvas.repaint();
                } catch (IOException ioe) {
                    JOptionPane.showMessageDialog(null, "Invalid file", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_openItemActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        try {
            File folder = new File(System.getProperty("user.dir") + "//savedPictures");
            if (!folder.exists()) {
                folder.mkdir();
            }
            String name = JOptionPane.showInputDialog(null, "Enter the name of the file", "Picture");
            if (name == null) {
                return;
            }
            File fileSave = new File(System.getProperty("user.dir") + "//savedPictures//" + name + ".png");
            if (fileSave.exists()) {
                int res = JOptionPane.showConfirmDialog(null, "Are you sure you want to overwrite " + fileSave.getName() + "?", "Overwrite ?", JOptionPane.YES_NO_CANCEL_OPTION);
                if (res == JOptionPane.YES_OPTION) {
                    fileSave.createNewFile();
                } else {
                    return;
                }
            } else {
                fileSave.createNewFile();
            }
            ImageIO.write(CanvasPanel.getScreenComponent(canvas), "png", fileSave);
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(null, "Invalid file", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveItemActionPerformed

    private void saveAsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsItemActionPerformed
        File file = new File(System.getProperty("user.dir"));
        JFileChooser fc = new JFileChooser(file);
        int i = fc.showSaveDialog(null);
        switch (i) {
            case JFileChooser.APPROVE_OPTION: {
                try {
                    File fileSave = new File(fc.getSelectedFile() + ".png");
                    if (fileSave.exists()) {
                        int res = JOptionPane.showConfirmDialog(null, "Are you sure you want to rewrite the file " + file.getName() + "?", "Rewrite ?", JOptionPane.YES_NO_CANCEL_OPTION);
                        if (res == JOptionPane.YES_OPTION) {
                        } else {
                            return;
                        }
                    }
                    fileSave.createNewFile();
                    ImageIO.write(CanvasPanel.getScreenComponent(canvas), "png", fileSave);
                } catch (IOException ioe) {
                    JOptionPane.showMessageDialog(null, "Invalid file", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_saveAsItemActionPerformed

    private void newPictureItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPictureItemActionPerformed
        int res = JOptionPane.showConfirmDialog(null, "Are you sure you want to clean the canvas ?", "Clean?", JOptionPane.YES_NO_CANCEL_OPTION);
        if (res == JOptionPane.YES_OPTION) {
            ArrayList<Drawable> list = new ArrayList<>();
            canvas.setShapes(list);
            list.add(canvas.getBackgroundRectangle());
            canvas.repaint();
        }
    }//GEN-LAST:event_newPictureItemActionPerformed

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
        JOptionPane.showMessageDialog(null, "Graphics Editor\n\nmade by Vadym Nakytniak in 2019", "About", JOptionPane.DEFAULT_OPTION);
    }//GEN-LAST:event_aboutItemActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void insertItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertItemActionPerformed
        canvas.reset();
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        if (clipboard.isDataFlavorAvailable(DataFlavor.imageFlavor)) {
            try {
                BufferedImage image = (BufferedImage) clipboard.getData(DataFlavor.imageFlavor);
                canvas.setImage(image, 0, 0);
                canvas.repaint();
                canvas.setTool(Tool.INSERT_PICTURE);
                canvas.setIsMouseOnImage(true);
                toolbar.updatePreview();
            } catch (UnsupportedFlavorException | IOException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "NO IMAGES", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_insertItemActionPerformed

    private void cutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuActionPerformed
        canvas.reset();
        canvas.setTool(Tool.CUT_OUT);
        toolbar.updatePreview();
    }//GEN-LAST:event_cutMenuActionPerformed

    public void setCurrentCoordinates() {
        current_x_coordinate = (int) this.getMousePosition().getX();
        current_y_coordinate = (int) this.getMousePosition().getX();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            // Set System L&F
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GEFrame().setVisible(true);
        });
    }

    public CanvasPanel getCanvas() {
        return canvas;
    }

    public ToolbarPanel getToolbar() {
        return toolbar;
    }

    public ScrollSidePanel getScrollside() {
        return scrollside;
    }

    public JMenu getFileMenu() {
        return fileMenu;
    }

    public JMenuBar getjMenuBar() {
        return menuBar;
    }

    public int getCurrent_x_coordinate() {
        return current_x_coordinate;
    }

    public int getCurrent_y_coordinate() {
        return current_y_coordinate;
    }

    public JScrollPane getScrollCanvas() {
        return scrollCanvas;
    }

    public void setCurrent_x_coordinate(int current_x_coordinate) {
        this.current_x_coordinate = current_x_coordinate;
    }

    public void setCurrent_y_coordinate(int current_y_coordinate) {
        this.current_y_coordinate = current_y_coordinate;
    }

    public void setScrollCanvas(JScrollPane scrollCanvas) {
        this.scrollCanvas = scrollCanvas;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JMenuItem backItem;
    private javax.swing.JMenuItem cutMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem forwardItem;
    private javax.swing.JMenuItem insertItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newPictureItem;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JMenuItem saveAsItem;
    private javax.swing.JMenuItem saveItem;
    // End of variables declaration//GEN-END:variables
}
